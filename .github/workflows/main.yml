name: R-CMD-check

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.os }}
    env:
      R_LIBS_USER: ${{ github.workspace }}/R/library  # consistent library path
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        r-version: ['4.3', '4.2', '4.1.1']

    steps:
      - uses: actions/checkout@v4

      - name: Cache R packages
        uses: actions/cache@v3
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-R-${{ matrix.r-version }}-${{ hashFiles('**/DESCRIPTION') }}
          restore-keys: |
            ${{ runner.os }}-R-${{ matrix.r-version }}-

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev

      - name: Set up R ${{ matrix.r-version }}
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.r-version }}

      - name: Install CRAN dependencies
        run: |
          install.packages(c("curl", "remotes", "rcmdcheck", "testthat", "knitr", "devtools", "DT"), lib = Sys.getenv("R_LIBS_USER"))
          remotes::install_deps(dependencies = TRUE, lib = Sys.getenv("R_LIBS_USER"))
        shell: Rscript {0}

      - name: List installed packages
        run: Rscript -e 'installed.packages(lib.loc = Sys.getenv("R_LIBS_USER"))[, "Package"]'

      - name: Run checks and tests
        env:
          _R_CHECK_FORCE_SUGGESTS_: false
          R_LIBS_USER: ${{ github.workspace }}/R/library
        run: |
          rcmdcheck::rcmdcheck(args = c("--no-manual", "--run-donttest", "--no-build-vignettes"), error_on = "error")
          devtools::test()
        shell: Rscript {0}
